// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OpenMahjong
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Mentsu : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Mentsu __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public OpenMahjong.MentsuPai PaiList(int j) { return (new OpenMahjong.MentsuPai()).__assign(__p.bb_pos + 0 + j * 3, __p.bb); }
  public uint PaiLen { get { return __p.bb.GetUint(__p.bb_pos + 12); } }
  public void MutatePaiLen(uint pai_len) { __p.bb.PutUint(__p.bb_pos + 12, pai_len); }

  public static Offset<OpenMahjong.Mentsu> CreateMentsu(FlatBufferBuilder builder, byte[] pai_list_PaiNum, byte[] pai_list_Id, OpenMahjong.MentsuFlag[] pai_list_Flag, uint PaiLen) {
    builder.Prep(4, 16);
    builder.PutUint(PaiLen);
    for (int _idx0 = 4; _idx0 > 0; _idx0--) {
      builder.Prep(1, 3);
      builder.PutByte((byte)pai_list_Flag[_idx0-1]);
      builder.PutByte(pai_list_Id[_idx0-1]);
      builder.PutByte(pai_list_PaiNum[_idx0-1]);
    }
    return new Offset<OpenMahjong.Mentsu>(builder.Offset);
  }
  public MentsuT UnPack() {
    var _o = new MentsuT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MentsuT _o) {
    _o.PaiList = new OpenMahjong.MentsuPaiT[4];
    for (var _j = 0; _j < 4; ++_j) { _o.PaiList[_j] = this.PaiList(_j).UnPack(); }
    _o.PaiLen = this.PaiLen;
  }
  public static Offset<OpenMahjong.Mentsu> Pack(FlatBufferBuilder builder, MentsuT _o) {
    if (_o == null) return default(Offset<OpenMahjong.Mentsu>);
    var _pai_list_pai_num = new byte[4];
    for (var idx0 = 0; idx0 < 4; ++idx0) {_pai_list_pai_num[idx0] = _o.PaiList[idx0].PaiNum;}
    var _pai_list_id = new byte[4];
    for (var idx0 = 0; idx0 < 4; ++idx0) {_pai_list_id[idx0] = _o.PaiList[idx0].Id;}
    var _pai_list_flag = new OpenMahjong.MentsuFlag[4];
    for (var idx0 = 0; idx0 < 4; ++idx0) {_pai_list_flag[idx0] = _o.PaiList[idx0].Flag;}
    return CreateMentsu(
      builder,
      _pai_list_pai_num,
      _pai_list_id,
      _pai_list_flag,
      _o.PaiLen);
  }
}

public class MentsuT
{
  public OpenMahjong.MentsuPaiT[] PaiList { get; set; }
  public uint PaiLen { get; set; }

  public MentsuT() {
    this.PaiList = new OpenMahjong.MentsuPaiT[4];
    this.PaiLen = 0;
  }
}


}
