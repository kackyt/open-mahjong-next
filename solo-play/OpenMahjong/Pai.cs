// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OpenMahjong
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Pai : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Pai __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte PaiNum { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public void MutatePaiNum(byte pai_num) { __p.bb.Put(__p.bb_pos + 0, pai_num); }
  public byte Id { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public void MutateId(byte id) { __p.bb.Put(__p.bb_pos + 1, id); }
  public bool IsTsumogiri { get { return 0!=__p.bb.Get(__p.bb_pos + 2); } }
  public void MutateIsTsumogiri(bool is_tsumogiri) { __p.bb.Put(__p.bb_pos + 2, (byte)(is_tsumogiri ? 1 : 0)); }
  public bool IsRiichi { get { return 0!=__p.bb.Get(__p.bb_pos + 3); } }
  public void MutateIsRiichi(bool is_riichi) { __p.bb.Put(__p.bb_pos + 3, (byte)(is_riichi ? 1 : 0)); }
  public bool IsNakare { get { return 0!=__p.bb.Get(__p.bb_pos + 4); } }
  public void MutateIsNakare(bool is_nakare) { __p.bb.Put(__p.bb_pos + 4, (byte)(is_nakare ? 1 : 0)); }

  public static Offset<OpenMahjong.Pai> CreatePai(FlatBufferBuilder builder, byte PaiNum, byte Id, bool IsTsumogiri, bool IsRiichi, bool IsNakare) {
    builder.Prep(1, 5);
    builder.PutBool(IsNakare);
    builder.PutBool(IsRiichi);
    builder.PutBool(IsTsumogiri);
    builder.PutByte(Id);
    builder.PutByte(PaiNum);
    return new Offset<OpenMahjong.Pai>(builder.Offset);
  }
  public PaiT UnPack() {
    var _o = new PaiT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PaiT _o) {
    _o.PaiNum = this.PaiNum;
    _o.Id = this.Id;
    _o.IsTsumogiri = this.IsTsumogiri;
    _o.IsRiichi = this.IsRiichi;
    _o.IsNakare = this.IsNakare;
  }
  public static Offset<OpenMahjong.Pai> Pack(FlatBufferBuilder builder, PaiT _o) {
    if (_o == null) return default(Offset<OpenMahjong.Pai>);
    return CreatePai(
      builder,
      _o.PaiNum,
      _o.Id,
      _o.IsTsumogiri,
      _o.IsRiichi,
      _o.IsNakare);
  }
}

public class PaiT
{
  public byte PaiNum { get; set; }
  public byte Id { get; set; }
  public bool IsTsumogiri { get; set; }
  public bool IsRiichi { get; set; }
  public bool IsNakare { get; set; }

  public PaiT() {
    this.PaiNum = 0;
    this.Id = 0;
    this.IsTsumogiri = false;
    this.IsRiichi = false;
    this.IsNakare = false;
  }
}


}
