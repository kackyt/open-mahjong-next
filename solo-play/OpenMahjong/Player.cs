// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OpenMahjong
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Player : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public OpenMahjong.FixedString Name { get { return (new OpenMahjong.FixedString()).__assign(__p.bb_pos + 0, __p.bb); } }
  public OpenMahjong.Mentsu Mentsu(int j) { return (new OpenMahjong.Mentsu()).__assign(__p.bb_pos + 256 + j * 16, __p.bb); }
  public uint MentsuLen { get { return __p.bb.GetUint(__p.bb_pos + 320); } }
  public void MutateMentsuLen(uint mentsu_len) { __p.bb.PutUint(__p.bb_pos + 320, mentsu_len); }
  public OpenMahjong.Pai Tehai(int j) { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 324 + j * 5, __p.bb); }
  public uint TehaiLen { get { return __p.bb.GetUint(__p.bb_pos + 392); } }
  public void MutateTehaiLen(uint tehai_len) { __p.bb.PutUint(__p.bb_pos + 392, tehai_len); }
  public OpenMahjong.Pai Kawahai(int j) { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 396 + j * 5, __p.bb); }
  public uint KawahaiLen { get { return __p.bb.GetUint(__p.bb_pos + 496); } }
  public void MutateKawahaiLen(uint kawahai_len) { __p.bb.PutUint(__p.bb_pos + 496, kawahai_len); }
  public OpenMahjong.Pai Tsumohai { get { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 500, __p.bb); } }
  public bool IsTsumo { get { return 0!=__p.bb.Get(__p.bb_pos + 505); } }
  public void MutateIsTsumo(bool is_tsumo) { __p.bb.Put(__p.bb_pos + 505, (byte)(is_tsumo ? 1 : 0)); }
  public bool IsRiichi { get { return 0!=__p.bb.Get(__p.bb_pos + 506); } }
  public void MutateIsRiichi(bool is_riichi) { __p.bb.Put(__p.bb_pos + 506, (byte)(is_riichi ? 1 : 0)); }
  public bool IsIppatsu { get { return 0!=__p.bb.Get(__p.bb_pos + 507); } }
  public void MutateIsIppatsu(bool is_ippatsu) { __p.bb.Put(__p.bb_pos + 507, (byte)(is_ippatsu ? 1 : 0)); }
  public int Score { get { return __p.bb.GetInt(__p.bb_pos + 508); } }
  public void MutateScore(int score) { __p.bb.PutInt(__p.bb_pos + 508, score); }

  public static Offset<OpenMahjong.Player> CreatePlayer(FlatBufferBuilder builder, byte[] name_N1, byte[] name_N2, byte[] name_N3, byte[] name_N4, byte[] name_N5, byte[] name_N6, byte[] name_N7, byte[] name_N8, byte[,] mentsu_pai_list_PaiNum, byte[,] mentsu_pai_list_Id, OpenMahjong.MentsuFlag[,] mentsu_pai_list_Flag, uint[] mentsu_PaiLen, uint MentsuLen, byte[] tehai_PaiNum, byte[] tehai_Id, bool[] tehai_IsTsumogiri, bool[] tehai_IsRiichi, bool[] tehai_IsNakare, uint TehaiLen, byte[] kawahai_PaiNum, byte[] kawahai_Id, bool[] kawahai_IsTsumogiri, bool[] kawahai_IsRiichi, bool[] kawahai_IsNakare, uint KawahaiLen, byte tsumohai_PaiNum, byte tsumohai_Id, bool tsumohai_IsTsumogiri, bool tsumohai_IsRiichi, bool tsumohai_IsNakare, bool IsTsumo, bool IsRiichi, bool IsIppatsu, int Score) {
    builder.Prep(4, 512);
    builder.PutInt(Score);
    builder.PutBool(IsIppatsu);
    builder.PutBool(IsRiichi);
    builder.PutBool(IsTsumo);
    builder.Prep(1, 5);
    builder.PutBool(tsumohai_IsNakare);
    builder.PutBool(tsumohai_IsRiichi);
    builder.PutBool(tsumohai_IsTsumogiri);
    builder.PutByte(tsumohai_Id);
    builder.PutByte(tsumohai_PaiNum);
    builder.PutUint(KawahaiLen);
    for (int _idx0 = 20; _idx0 > 0; _idx0--) {
      builder.Prep(1, 5);
      builder.PutBool(kawahai_IsNakare[_idx0-1]);
      builder.PutBool(kawahai_IsRiichi[_idx0-1]);
      builder.PutBool(kawahai_IsTsumogiri[_idx0-1]);
      builder.PutByte(kawahai_Id[_idx0-1]);
      builder.PutByte(kawahai_PaiNum[_idx0-1]);
    }
    builder.PutUint(TehaiLen);
    builder.Pad(3);
    for (int _idx0 = 13; _idx0 > 0; _idx0--) {
      builder.Prep(1, 5);
      builder.PutBool(tehai_IsNakare[_idx0-1]);
      builder.PutBool(tehai_IsRiichi[_idx0-1]);
      builder.PutBool(tehai_IsTsumogiri[_idx0-1]);
      builder.PutByte(tehai_Id[_idx0-1]);
      builder.PutByte(tehai_PaiNum[_idx0-1]);
    }
    builder.PutUint(MentsuLen);
    for (int _idx0 = 4; _idx0 > 0; _idx0--) {
      builder.Prep(4, 16);
      builder.PutUint(mentsu_PaiLen[_idx0-1]);
      for (int _idx1 = 4; _idx1 > 0; _idx1--) {
        builder.Prep(1, 3);
        builder.PutByte((byte)mentsu_pai_list_Flag[_idx0-1,_idx1-1]);
        builder.PutByte(mentsu_pai_list_Id[_idx0-1,_idx1-1]);
        builder.PutByte(mentsu_pai_list_PaiNum[_idx0-1,_idx1-1]);
      }
    }
    builder.Prep(1, 256);
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N8[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N7[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N6[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N5[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N4[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N3[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N2[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.PutByte(name_N1[_idx0-1]);
    }
    return new Offset<OpenMahjong.Player>(builder.Offset);
  }
  public PlayerT UnPack() {
    var _o = new PlayerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlayerT _o) {
    _o.Name = this.Name.UnPack();
    _o.Mentsu = new OpenMahjong.MentsuT[4];
    for (var _j = 0; _j < 4; ++_j) { _o.Mentsu[_j] = this.Mentsu(_j).UnPack(); }
    _o.MentsuLen = this.MentsuLen;
    _o.Tehai = new OpenMahjong.PaiT[13];
    for (var _j = 0; _j < 13; ++_j) { _o.Tehai[_j] = this.Tehai(_j).UnPack(); }
    _o.TehaiLen = this.TehaiLen;
    _o.Kawahai = new OpenMahjong.PaiT[20];
    for (var _j = 0; _j < 20; ++_j) { _o.Kawahai[_j] = this.Kawahai(_j).UnPack(); }
    _o.KawahaiLen = this.KawahaiLen;
    _o.Tsumohai = this.Tsumohai.UnPack();
    _o.IsTsumo = this.IsTsumo;
    _o.IsRiichi = this.IsRiichi;
    _o.IsIppatsu = this.IsIppatsu;
    _o.Score = this.Score;
  }
  public static Offset<OpenMahjong.Player> Pack(FlatBufferBuilder builder, PlayerT _o) {
    if (_o == null) return default(Offset<OpenMahjong.Player>);
    var _name_n1 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n1[idx0] = _o.Name.N1[idx0];}
    var _name_n2 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n2[idx0] = _o.Name.N2[idx0];}
    var _name_n3 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n3[idx0] = _o.Name.N3[idx0];}
    var _name_n4 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n4[idx0] = _o.Name.N4[idx0];}
    var _name_n5 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n5[idx0] = _o.Name.N5[idx0];}
    var _name_n6 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n6[idx0] = _o.Name.N6[idx0];}
    var _name_n7 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n7[idx0] = _o.Name.N7[idx0];}
    var _name_n8 = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_name_n8[idx0] = _o.Name.N8[idx0];}
    var _mentsu_pai_list_pai_num = new byte[4,4];
    for (var idx0 = 0; idx0 < 4; ++idx0) {for (var idx1 = 0; idx1 < 4; ++idx1) {_mentsu_pai_list_pai_num[idx0,idx1] = _o.Mentsu[idx0].PaiList[idx1].PaiNum;}}
    var _mentsu_pai_list_id = new byte[4,4];
    for (var idx0 = 0; idx0 < 4; ++idx0) {for (var idx1 = 0; idx1 < 4; ++idx1) {_mentsu_pai_list_id[idx0,idx1] = _o.Mentsu[idx0].PaiList[idx1].Id;}}
    var _mentsu_pai_list_flag = new OpenMahjong.MentsuFlag[4,4];
    for (var idx0 = 0; idx0 < 4; ++idx0) {for (var idx1 = 0; idx1 < 4; ++idx1) {_mentsu_pai_list_flag[idx0,idx1] = _o.Mentsu[idx0].PaiList[idx1].Flag;}}
    var _mentsu_pai_len = new uint[4];
    for (var idx0 = 0; idx0 < 4; ++idx0) {_mentsu_pai_len[idx0] = _o.Mentsu[idx0].PaiLen;}
    var _tehai_pai_num = new byte[13];
    for (var idx0 = 0; idx0 < 13; ++idx0) {_tehai_pai_num[idx0] = _o.Tehai[idx0].PaiNum;}
    var _tehai_id = new byte[13];
    for (var idx0 = 0; idx0 < 13; ++idx0) {_tehai_id[idx0] = _o.Tehai[idx0].Id;}
    var _tehai_is_tsumogiri = new bool[13];
    for (var idx0 = 0; idx0 < 13; ++idx0) {_tehai_is_tsumogiri[idx0] = _o.Tehai[idx0].IsTsumogiri;}
    var _tehai_is_riichi = new bool[13];
    for (var idx0 = 0; idx0 < 13; ++idx0) {_tehai_is_riichi[idx0] = _o.Tehai[idx0].IsRiichi;}
    var _tehai_is_nakare = new bool[13];
    for (var idx0 = 0; idx0 < 13; ++idx0) {_tehai_is_nakare[idx0] = _o.Tehai[idx0].IsNakare;}
    var _kawahai_pai_num = new byte[20];
    for (var idx0 = 0; idx0 < 20; ++idx0) {_kawahai_pai_num[idx0] = _o.Kawahai[idx0].PaiNum;}
    var _kawahai_id = new byte[20];
    for (var idx0 = 0; idx0 < 20; ++idx0) {_kawahai_id[idx0] = _o.Kawahai[idx0].Id;}
    var _kawahai_is_tsumogiri = new bool[20];
    for (var idx0 = 0; idx0 < 20; ++idx0) {_kawahai_is_tsumogiri[idx0] = _o.Kawahai[idx0].IsTsumogiri;}
    var _kawahai_is_riichi = new bool[20];
    for (var idx0 = 0; idx0 < 20; ++idx0) {_kawahai_is_riichi[idx0] = _o.Kawahai[idx0].IsRiichi;}
    var _kawahai_is_nakare = new bool[20];
    for (var idx0 = 0; idx0 < 20; ++idx0) {_kawahai_is_nakare[idx0] = _o.Kawahai[idx0].IsNakare;}
    var _tsumohai_pai_num = _o.Tsumohai.PaiNum;
    var _tsumohai_id = _o.Tsumohai.Id;
    var _tsumohai_is_tsumogiri = _o.Tsumohai.IsTsumogiri;
    var _tsumohai_is_riichi = _o.Tsumohai.IsRiichi;
    var _tsumohai_is_nakare = _o.Tsumohai.IsNakare;
    return CreatePlayer(
      builder,
      _name_n1,
      _name_n2,
      _name_n3,
      _name_n4,
      _name_n5,
      _name_n6,
      _name_n7,
      _name_n8,
      _mentsu_pai_list_pai_num,
      _mentsu_pai_list_id,
      _mentsu_pai_list_flag,
      _mentsu_pai_len,
      _o.MentsuLen,
      _tehai_pai_num,
      _tehai_id,
      _tehai_is_tsumogiri,
      _tehai_is_riichi,
      _tehai_is_nakare,
      _o.TehaiLen,
      _kawahai_pai_num,
      _kawahai_id,
      _kawahai_is_tsumogiri,
      _kawahai_is_riichi,
      _kawahai_is_nakare,
      _o.KawahaiLen,
      _tsumohai_pai_num,
      _tsumohai_id,
      _tsumohai_is_tsumogiri,
      _tsumohai_is_riichi,
      _tsumohai_is_nakare,
      _o.IsTsumo,
      _o.IsRiichi,
      _o.IsIppatsu,
      _o.Score);
  }
}

public class PlayerT
{
  public OpenMahjong.FixedStringT Name { get; set; }
  public OpenMahjong.MentsuT[] Mentsu { get; set; }
  public uint MentsuLen { get; set; }
  public OpenMahjong.PaiT[] Tehai { get; set; }
  public uint TehaiLen { get; set; }
  public OpenMahjong.PaiT[] Kawahai { get; set; }
  public uint KawahaiLen { get; set; }
  public OpenMahjong.PaiT Tsumohai { get; set; }
  public bool IsTsumo { get; set; }
  public bool IsRiichi { get; set; }
  public bool IsIppatsu { get; set; }
  public int Score { get; set; }

  public PlayerT() {
    this.Name = new OpenMahjong.FixedStringT();
    this.Mentsu = new OpenMahjong.MentsuT[4];
    this.MentsuLen = 0;
    this.Tehai = new OpenMahjong.PaiT[13];
    this.TehaiLen = 0;
    this.Kawahai = new OpenMahjong.PaiT[20];
    this.KawahaiLen = 0;
    this.Tsumohai = new OpenMahjong.PaiT();
    this.IsTsumo = false;
    this.IsRiichi = false;
    this.IsIppatsu = false;
    this.Score = 0;
  }
}


}
