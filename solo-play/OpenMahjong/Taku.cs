// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OpenMahjong
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Taku : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Taku __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public OpenMahjong.Pai N1(int j) { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 0 + j * 5, __p.bb); }
  public OpenMahjong.Pai N2(int j) { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 160 + j * 5, __p.bb); }
  public OpenMahjong.Pai N3(int j) { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 320 + j * 5, __p.bb); }
  public OpenMahjong.Pai N4(int j) { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 480 + j * 5, __p.bb); }
  public OpenMahjong.Pai N5(int j) { return (new OpenMahjong.Pai()).__assign(__p.bb_pos + 640 + j * 5, __p.bb); }
  public uint Length { get { return __p.bb.GetUint(__p.bb_pos + 680); } }
  public void MutateLength(uint length) { __p.bb.PutUint(__p.bb_pos + 680, length); }

  public static Offset<OpenMahjong.Taku> CreateTaku(FlatBufferBuilder builder, byte[] n1_PaiNum, byte[] n1_Id, bool[] n1_IsTsumogiri, bool[] n1_IsRiichi, bool[] n1_IsNakare, byte[] n2_PaiNum, byte[] n2_Id, bool[] n2_IsTsumogiri, bool[] n2_IsRiichi, bool[] n2_IsNakare, byte[] n3_PaiNum, byte[] n3_Id, bool[] n3_IsTsumogiri, bool[] n3_IsRiichi, bool[] n3_IsNakare, byte[] n4_PaiNum, byte[] n4_Id, bool[] n4_IsTsumogiri, bool[] n4_IsRiichi, bool[] n4_IsNakare, byte[] n5_PaiNum, byte[] n5_Id, bool[] n5_IsTsumogiri, bool[] n5_IsRiichi, bool[] n5_IsNakare, uint Length) {
    builder.Prep(4, 684);
    builder.PutUint(Length);
    for (int _idx0 = 8; _idx0 > 0; _idx0--) {
      builder.Prep(1, 5);
      builder.PutBool(n5_IsNakare[_idx0-1]);
      builder.PutBool(n5_IsRiichi[_idx0-1]);
      builder.PutBool(n5_IsTsumogiri[_idx0-1]);
      builder.PutByte(n5_Id[_idx0-1]);
      builder.PutByte(n5_PaiNum[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.Prep(1, 5);
      builder.PutBool(n4_IsNakare[_idx0-1]);
      builder.PutBool(n4_IsRiichi[_idx0-1]);
      builder.PutBool(n4_IsTsumogiri[_idx0-1]);
      builder.PutByte(n4_Id[_idx0-1]);
      builder.PutByte(n4_PaiNum[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.Prep(1, 5);
      builder.PutBool(n3_IsNakare[_idx0-1]);
      builder.PutBool(n3_IsRiichi[_idx0-1]);
      builder.PutBool(n3_IsTsumogiri[_idx0-1]);
      builder.PutByte(n3_Id[_idx0-1]);
      builder.PutByte(n3_PaiNum[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.Prep(1, 5);
      builder.PutBool(n2_IsNakare[_idx0-1]);
      builder.PutBool(n2_IsRiichi[_idx0-1]);
      builder.PutBool(n2_IsTsumogiri[_idx0-1]);
      builder.PutByte(n2_Id[_idx0-1]);
      builder.PutByte(n2_PaiNum[_idx0-1]);
    }
    for (int _idx0 = 32; _idx0 > 0; _idx0--) {
      builder.Prep(1, 5);
      builder.PutBool(n1_IsNakare[_idx0-1]);
      builder.PutBool(n1_IsRiichi[_idx0-1]);
      builder.PutBool(n1_IsTsumogiri[_idx0-1]);
      builder.PutByte(n1_Id[_idx0-1]);
      builder.PutByte(n1_PaiNum[_idx0-1]);
    }
    return new Offset<OpenMahjong.Taku>(builder.Offset);
  }
  public TakuT UnPack() {
    var _o = new TakuT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TakuT _o) {
    _o.N1 = new OpenMahjong.PaiT[32];
    for (var _j = 0; _j < 32; ++_j) { _o.N1[_j] = this.N1(_j).UnPack(); }
    _o.N2 = new OpenMahjong.PaiT[32];
    for (var _j = 0; _j < 32; ++_j) { _o.N2[_j] = this.N2(_j).UnPack(); }
    _o.N3 = new OpenMahjong.PaiT[32];
    for (var _j = 0; _j < 32; ++_j) { _o.N3[_j] = this.N3(_j).UnPack(); }
    _o.N4 = new OpenMahjong.PaiT[32];
    for (var _j = 0; _j < 32; ++_j) { _o.N4[_j] = this.N4(_j).UnPack(); }
    _o.N5 = new OpenMahjong.PaiT[8];
    for (var _j = 0; _j < 8; ++_j) { _o.N5[_j] = this.N5(_j).UnPack(); }
    _o.Length = this.Length;
  }
  public static Offset<OpenMahjong.Taku> Pack(FlatBufferBuilder builder, TakuT _o) {
    if (_o == null) return default(Offset<OpenMahjong.Taku>);
    var _n1_pai_num = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n1_pai_num[idx0] = _o.N1[idx0].PaiNum;}
    var _n1_id = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n1_id[idx0] = _o.N1[idx0].Id;}
    var _n1_is_tsumogiri = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n1_is_tsumogiri[idx0] = _o.N1[idx0].IsTsumogiri;}
    var _n1_is_riichi = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n1_is_riichi[idx0] = _o.N1[idx0].IsRiichi;}
    var _n1_is_nakare = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n1_is_nakare[idx0] = _o.N1[idx0].IsNakare;}
    var _n2_pai_num = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n2_pai_num[idx0] = _o.N2[idx0].PaiNum;}
    var _n2_id = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n2_id[idx0] = _o.N2[idx0].Id;}
    var _n2_is_tsumogiri = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n2_is_tsumogiri[idx0] = _o.N2[idx0].IsTsumogiri;}
    var _n2_is_riichi = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n2_is_riichi[idx0] = _o.N2[idx0].IsRiichi;}
    var _n2_is_nakare = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n2_is_nakare[idx0] = _o.N2[idx0].IsNakare;}
    var _n3_pai_num = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n3_pai_num[idx0] = _o.N3[idx0].PaiNum;}
    var _n3_id = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n3_id[idx0] = _o.N3[idx0].Id;}
    var _n3_is_tsumogiri = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n3_is_tsumogiri[idx0] = _o.N3[idx0].IsTsumogiri;}
    var _n3_is_riichi = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n3_is_riichi[idx0] = _o.N3[idx0].IsRiichi;}
    var _n3_is_nakare = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n3_is_nakare[idx0] = _o.N3[idx0].IsNakare;}
    var _n4_pai_num = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n4_pai_num[idx0] = _o.N4[idx0].PaiNum;}
    var _n4_id = new byte[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n4_id[idx0] = _o.N4[idx0].Id;}
    var _n4_is_tsumogiri = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n4_is_tsumogiri[idx0] = _o.N4[idx0].IsTsumogiri;}
    var _n4_is_riichi = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n4_is_riichi[idx0] = _o.N4[idx0].IsRiichi;}
    var _n4_is_nakare = new bool[32];
    for (var idx0 = 0; idx0 < 32; ++idx0) {_n4_is_nakare[idx0] = _o.N4[idx0].IsNakare;}
    var _n5_pai_num = new byte[8];
    for (var idx0 = 0; idx0 < 8; ++idx0) {_n5_pai_num[idx0] = _o.N5[idx0].PaiNum;}
    var _n5_id = new byte[8];
    for (var idx0 = 0; idx0 < 8; ++idx0) {_n5_id[idx0] = _o.N5[idx0].Id;}
    var _n5_is_tsumogiri = new bool[8];
    for (var idx0 = 0; idx0 < 8; ++idx0) {_n5_is_tsumogiri[idx0] = _o.N5[idx0].IsTsumogiri;}
    var _n5_is_riichi = new bool[8];
    for (var idx0 = 0; idx0 < 8; ++idx0) {_n5_is_riichi[idx0] = _o.N5[idx0].IsRiichi;}
    var _n5_is_nakare = new bool[8];
    for (var idx0 = 0; idx0 < 8; ++idx0) {_n5_is_nakare[idx0] = _o.N5[idx0].IsNakare;}
    return CreateTaku(
      builder,
      _n1_pai_num,
      _n1_id,
      _n1_is_tsumogiri,
      _n1_is_riichi,
      _n1_is_nakare,
      _n2_pai_num,
      _n2_id,
      _n2_is_tsumogiri,
      _n2_is_riichi,
      _n2_is_nakare,
      _n3_pai_num,
      _n3_id,
      _n3_is_tsumogiri,
      _n3_is_riichi,
      _n3_is_nakare,
      _n4_pai_num,
      _n4_id,
      _n4_is_tsumogiri,
      _n4_is_riichi,
      _n4_is_nakare,
      _n5_pai_num,
      _n5_id,
      _n5_is_tsumogiri,
      _n5_is_riichi,
      _n5_is_nakare,
      _o.Length);
  }
}

public class TakuT
{
  public OpenMahjong.PaiT[] N1 { get; set; }
  public OpenMahjong.PaiT[] N2 { get; set; }
  public OpenMahjong.PaiT[] N3 { get; set; }
  public OpenMahjong.PaiT[] N4 { get; set; }
  public OpenMahjong.PaiT[] N5 { get; set; }
  public uint Length { get; set; }

  public TakuT() {
    this.N1 = new OpenMahjong.PaiT[32];
    this.N2 = new OpenMahjong.PaiT[32];
    this.N3 = new OpenMahjong.PaiT[32];
    this.N4 = new OpenMahjong.PaiT[32];
    this.N5 = new OpenMahjong.PaiT[8];
    this.Length = 0;
  }
}


}
